/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Telas;

import TelasForaDeUso.CadastroClientes;
import Atributos.Clientes;
import Atributos.Devedores;
import Atributos.Negociacao;
import Atributos.Pagamentos;
import Banco.ClientesDAO;
import Banco.DevedoresDAO;
import Banco.NegociacaoDAO;
import Banco.PagamentosDAO;
import java.text.ParseException;
import java.util.ArrayList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author User
 */
public class ListaClientes extends JDialog {

    public ListaClientes(JFrame owner) {
        super(owner, "Listagem de clientes", true);
        initComponents();
        jProgressBar1.setVisible(true);
        desativaCampos();
        mascara();
        pesquisar("%");
        
    }
    
    private void desativaCampos(){
        jTFCliente.setEditable(false);
        jTFRazao.setEditable(false);
        jTFCPFCNPJ.setEditable(false);
    }
    
    DefaultTableModel model = new DefaultTableModel();
    DefaultTableModel modelDevedores = new DefaultTableModel();
    String aReceber = "";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTFCliente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTFRazao = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTClientes = new javax.swing.JTable();
        jTFCPFCNPJ = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTFValorRecebido = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTDebitos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTFPesquisar = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados"));

        jLabel2.setText("Progresso de recebimento em 30 dias:");

        jLabel3.setText("Cliente:");

        jLabel4.setText("Raz√£o Social:");

        jLabel5.setText("CPF/CNPJ:");

        jTClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cliente", "CPF/CNPJ", "Valor a receber"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTClientes.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = jTClientes.getSelectedRow();
                    if (selectedRow != -1) {
                        aReceber = (String.valueOf(jTClientes.getValueAt(selectedRow,2)));
                        pesquisarDevedores(String.valueOf(jTClientes.getValueAt(selectedRow,0)),String.valueOf((jTClientes.getValueAt(selectedRow, 1))));
                        jTFCPFCNPJ.setText(String.valueOf(jTClientes.getValueAt(selectedRow, 1)));
                        jTFCliente.setText(String.valueOf(jTClientes.getValueAt(selectedRow, 0)));
                        buscaRazao(String.valueOf(jTClientes.getValueAt(selectedRow, 1)));
                    }
                }
            }
        });
        jTClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTClientes);

        jLabel6.setText("Valor recebido em 30 dias:");

        jLabel7.setText("R$");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFCPFCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFRazao, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFValorRecebido, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTFCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTFRazao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTFCPFCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jTFValorRecebido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTDebitos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Devedor", "Devedor", "CPF/CNPJ", "Saldo devedor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTDebitos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTDebitos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTDebitosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTDebitos);

        jLabel1.setText("Pesquisar Clientes:");

        jButton1.setText("Pesquisar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTFPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        pesquisar(jTFPesquisar.getText());
        modelDevedores.setRowCount(0);
        jProgressBar1.setValue(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTDebitosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTDebitosMouseClicked
        int selectedRow = jTDebitos.getSelectedRow();
        if(evt.getClickCount() == 2){
            if (selectedRow != -1) {
                ListaDevedores telaDevedores;
                telaDevedores = new ListaDevedores(Integer.parseInt(jTDebitos.getValueAt(jTDebitos.getSelectedRow(), 0).toString()), this);
                telaDevedores.setVisible(true);
            }
        }
    }//GEN-LAST:event_jTDebitosMouseClicked

    private void jTClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTClientesMouseClicked
        int selectedRow = jTClientes.getSelectedRow();
        if(evt.getClickCount() == 2){
            if (selectedRow != -1) {
                CadastroClientes telaClientes;
                telaClientes = new CadastroClientes(String.valueOf(jTClientes.getValueAt(jTClientes.getSelectedRow(), 1).toString()), this);
                telaClientes.setVisible(true);
            }
        }
    }//GEN-LAST:event_jTClientesMouseClicked

    private void buscaRazao(String cpfcnpj){
        ClientesDAO cDAO = new ClientesDAO();
        
        ArrayList<Clientes> lista = cDAO.buscaClientesPorCPF(cpfcnpj);
        jTFRazao.setText(lista.get(0).getRazao());
    }
    
    private void mascara(){
        String texto = jTFCPFCNPJ.getText().replaceAll("[^\\d]", "");
        
        String mascara;
        if(texto.length() <=11){
            mascara = "###.###.###-##";
        }else
            mascara = "##.###.###/####-##";
        
        try{
            MaskFormatter mask = new MaskFormatter(mascara);
            mask.setValueContainsLiteralCharacters(false);
            jTFCPFCNPJ.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(mask));
            jTFCPFCNPJ.setText(texto);
        }catch(ParseException e){
            e.printStackTrace();
        }
    }
    
    private void pesquisar(String busca){
        ClientesDAO clienteDAO = new ClientesDAO();
        Clientes cliente = new Clientes();

        ArrayList<Clientes> listaClientes = clienteDAO.buscaClientesPorNome(busca);
        model = (DefaultTableModel) jTClientes.getModel();
        model.setNumRows(0);
        if(listaClientes.isEmpty()){
            JOptionPane.showMessageDialog(null, "Nenhum cliente encontrado, verifique o CPF ou CNPJ digitado!");
        }else{
            for (int i = 0; i < listaClientes.size(); i++) {
                model.addRow(new Object[]{
                    listaClientes.get(i).getNomeCliente(),
                    listaClientes.get(i).getCpfcnpj(),
                    listaClientes.get(i).getValorEmCobranca()
                });
            }
        }
    }
    
    private void pesquisarDevedores(String nome, String cpfcnpj){
        int idCliente=0;
        
        ClientesDAO clienteDAO = new ClientesDAO();
        idCliente = clienteDAO.buscaIdClientePorCPF(cpfcnpj);
        
        DevedoresDAO devedoresDAO = new DevedoresDAO();
        ArrayList<Devedores> listaDevedores = devedoresDAO.buscaDevedoresPorCliente(idCliente);
        
        System.out.println("A receber-> "+aReceber);
        double porcentagem = (calculaProgressoRecebimento(idCliente)/(Double.parseDouble(aReceber)));
        jProgressBar1.setValue((int) porcentagem);
        
        modelDevedores = (DefaultTableModel) jTDebitos.getModel();
        modelDevedores.setNumRows(0);
        for (int i = 0; i < listaDevedores.size(); i++) {
            modelDevedores.addRow(new Object[]{
                listaDevedores.get(i).getIdDevedor(),
                listaDevedores.get(i).getNomeDevedor(),
                listaDevedores.get(i).getCpfcnpj(),
                listaDevedores.get(i).getSaldoDevedor()
            });
        }
        
    }
    
    private double calculaProgressoRecebimento(int idCliente){
        LocalDate dataHoje = LocalDate.now();
        
        PagamentosDAO pagamentosDAO = new PagamentosDAO();
        NegociacaoDAO nDao = new NegociacaoDAO();
        
        double recebido=0.0;
        
        ArrayList<Negociacao> listaNegociacoes = nDao.buscaNegociacoesPorCliente(idCliente);
        
        for (int j = 0; j < listaNegociacoes.size(); j++) {
            int idNegociacao = listaNegociacoes.get(j).getIdNegociacao();
            ArrayList<Pagamentos> listaPagamentos = pagamentosDAO.buscaPagamentosPorNegociacao(idNegociacao);
            
            for (int i = 0; i < listaPagamentos.size(); i++) {
                LocalDate dataVencimento = (listaPagamentos.get(i).getDataVencimento());
                long diferencaDias = ChronoUnit.DAYS.between(dataHoje, dataVencimento);
                if(diferencaDias<30 && listaPagamentos.get(i).getPago()==true){
                    recebido += listaPagamentos.get(i).getValorPago();
                }
            }
        }
        
        return recebido;
    }
    
    private java.util.Date converteData(Date data){
    
        return new java.util.Date(data.getTime());
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTClientes;
    private javax.swing.JTable jTDebitos;
    private javax.swing.JFormattedTextField jTFCPFCNPJ;
    private javax.swing.JTextField jTFCliente;
    private javax.swing.JTextField jTFPesquisar;
    private javax.swing.JTextField jTFRazao;
    private javax.swing.JTextField jTFValorRecebido;
    // End of variables declaration//GEN-END:variables
}
