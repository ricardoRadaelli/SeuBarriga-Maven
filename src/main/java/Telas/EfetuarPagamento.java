/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Telas;

import Atributos.Clientes;
import Atributos.Devedores;
import Atributos.Negociacao;
import Atributos.Pagamentos;
import Banco.ClientesDAO;
import Banco.DevedoresDAO;
import Banco.NegociacaoDAO;
import Banco.PagamentosDAO;
import java.awt.Color;
import java.awt.Component;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author User
 */
public class EfetuarPagamento extends javax.swing.JFrame implements PesquisaDevedores.InterfaceRepassaDadosDevedores {

    /**
     * Creates new form EfetuarPagamento
     */
    public EfetuarPagamento() {
        initComponents();
    }
    
    public EfetuarPagamento(int idNegociacao, int idCliente, int idDevedor, int idParcela){
        initComponents();
        
        devedorSelecionado(buscaDevedor(idDevedor));
        preencheTabelaNegociacoes(idDevedor);
        preencheTabelaPagamentos(idNegociacao);
        selecionaLinhas(idNegociacao, idParcela);
    }
            
    Devedores devedor;
    Pagamentos pagamentoSelecionado;
    DefaultTableModel modelPagamentos = new DefaultTableModel();
    DefaultTableModel modelNegociacao = new DefaultTableModel();

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">                          
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTFPesquisarDevedor = new javax.swing.JTextField();
        jBPesquisarDevedor = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTFNomeDevedor = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTFCPFDevedor = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTFDataPagamento = new javax.swing.JTextField();
        jTFValorPago = new javax.swing.JTextField();
        jBGravarPagamento = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTNegociacoes = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTPagamentos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Devedor"));

        jLabel2.setText("Pesquisar devedor:");

        jBPesquisarDevedor.setText("Pesquisar");
        jBPesquisarDevedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPesquisarDevedorActionPerformed(evt);
            }
        });

        jLabel6.setText("Nome:");

        jLabel7.setText("CPF/CNPJ:");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do pagamento"));

        jLabel1.setText("Data de pagamento:");

        jLabel3.setText("Valor pago:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jTFDataPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jTFValorPago, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(131, 131, 131))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jTFDataPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFValorPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jBGravarPagamento.setText("Gravar Pagamento");
        jBGravarPagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGravarPagamentoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jTFNomeDevedor, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFCPFDevedor, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFPesquisarDevedor)))
                        .addGap(20, 20, 20)
                        .addComponent(jBPesquisarDevedor)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(368, 368, 368)
                .addComponent(jBGravarPagamento)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTFPesquisarDevedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBPesquisarDevedor))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jTFCPFDevedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFNomeDevedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBGravarPagamento)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista de negociações"));

        jTNegociacoes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Negociação", "Id cliente", "Nome do cliente", "Saldo devedor", "Data da negociação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTNegociacoes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTNegociacoes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        TableColumnModel columnModel = jTNegociacoes.getColumnModel();

        // Escondendo a coluna de índice 1 (Coluna 2)
        columnModel.removeColumn(columnModel.getColumn(0));
        columnModel.removeColumn(columnModel.getColumn(0));

        jTNegociacoes.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    if (jTNegociacoes.getSelectedRow() != -1) {
                        preencheTabelaPagamentos(Integer.parseInt(jTNegociacoes.getModel().getValueAt(jTNegociacoes.getSelectedRow(), 0).toString()));
                    }
                }
            }
        });
        jScrollPane1.setViewportView(jTNegociacoes);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Pagamentos"));

        jTPagamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pagamento", "Valor parcela", "Data do pagamento", "Data de vencimento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTPagamentos);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     public interface InterfaceRepassaDadosPagamentos {
        void pagamentoSelecionado(Pagamentos pagamento);
    }
    
    public void setListenerClientes(InterfaceRepassaDadosPagamentos listener){
        this.listener = listener;
    }
    
    private InterfaceRepassaDadosPagamentos listener;
    
    private void jBPesquisarDevedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPesquisarDevedorActionPerformed
        PesquisaDevedores pesquisa = new PesquisaDevedores(jTFPesquisarDevedor.getText());
        pesquisa.setListenerDevedor(this);
        pesquisa.setVisible(true);
    }//GEN-LAST:event_jBPesquisarDevedorActionPerformed

    private void jBGravarPagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGravarPagamentoActionPerformed
        PagamentosDAO pdao = new PagamentosDAO();
        Pagamentos p = new Pagamentos();
        
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        // Converter a String em LocalDate
        LocalDate localDate = LocalDate.parse(jTFDataPagamento.getText(), formatter);
        
        p.setDataPagamento(localDate);
        p.setValorPago(Double.parseDouble(jTFValorPago.getText()));
        p.setIdPagamento(Integer.parseInt(jTPagamentos.getModel().getValueAt(jTPagamentos.getSelectedRow(), 0).toString()));
        p.setIdNegociacao(Integer.parseInt(jTNegociacoes.getModel().getValueAt(jTNegociacoes.getSelectedRow(), 0).toString()));
        pdao.efetuarPagamento(p);
        dispose();
    }//GEN-LAST:event_jBGravarPagamentoActionPerformed

    private void selecionaLinhas(int idNegociacao, int idParcela){
        int linha = 0;
        for (int i = 0; i < modelNegociacao.getRowCount(); i++) {
            if(Integer.parseInt(jTNegociacoes.getModel().getValueAt(i, 0).toString()) == idNegociacao){
                linha = i;
            }
        }
        jTNegociacoes.setRowSelectionInterval(linha, linha);
        
        jTPagamentos.setRowSelectionInterval(idParcela, idParcela);
        
    }
    
    public Pagamentos pagamentoSelecionado(int idPagamento){
        PagamentosDAO pdao = new PagamentosDAO();
        Pagamentos pag = pdao.getPagamento(idPagamento);
        
        return pag;
    }
    
    private void preencheTabelaPagamentos(int idNegociacao){
        PagamentosDAO pagDAO = new PagamentosDAO();
        
        ArrayList<Pagamentos> listaPagamentos = pagDAO.buscaPagamentosPorNegociacao(idNegociacao);
        modelPagamentos = (DefaultTableModel) jTPagamentos.getModel();
        modelPagamentos.setNumRows(0);
        if(listaPagamentos.isEmpty()){
            JOptionPane.showMessageDialog(null, "Nenhum pagamento encontrado, verifique a negociação selecionadas!");
        }else{
            for (int i = 0; i < listaPagamentos.size(); i++) {
                modelPagamentos.addRow(new Object[]{
                    listaPagamentos.get(i).getIdPagamento(),
                    listaPagamentos.get(i).getValorParcela(),
                    confereData(listaPagamentos.get(i).getDataPagamento().toString()),
                    converteData(listaPagamentos.get(i).getDataVencimento())                                 
                });
                jTPagamentos.setDefaultRenderer(Object.class, new EfetuarPagamento.CustomCellRenderer());
                repaint();
            }
        }
    }
    
    private void preencheTabelaNegociacoes(int idDevedor){
        NegociacaoDAO ndao = new NegociacaoDAO();
        ClientesDAO cdao = new ClientesDAO();
        DevedoresDAO ddao = new DevedoresDAO();
        
        ArrayList<Negociacao> listaNeg = ndao.buscaNegociacoesPorDevedor(idDevedor);
        modelNegociacao = (DefaultTableModel) jTNegociacoes.getModel();
        modelNegociacao.setNumRows(0);
        if(listaNeg.isEmpty()){
            JOptionPane.showMessageDialog(null, "Nenhum cliente encontrado, verifique o devedor selecionado!");
        }else{
            for (int i = 0; i < listaNeg.size(); i++) {                
                modelNegociacao.addRow(new Object[]{
                    listaNeg.get(i).getIdNegociacao(),
                    listaNeg.get(i).getIdCliente(),
                    cdao.buscaNomeCliente(listaNeg.get(i).getIdCliente()),
                    listaNeg.get(i).getSaldoDevedor(),
                    listaNeg.get(i).getDataNegociacao()
                });
            }
        }
    }
    
    private String converteData(LocalDate data){
        DateTimeFormatter formatoFinal = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        
        String dataFinal = data.format(formatoFinal);
       
        return dataFinal;
    }
    
    private String confereData(String data){
        DateFormat formatoOriginal = new SimpleDateFormat("yyyy-MM-dd");
        DateFormat formatoFinal = new SimpleDateFormat("dd/MM/yyyy");
        String dataP = null;

        if(!data.equals("1900-01-01")){
            try {
                Date dataOriginal = formatoOriginal.parse(data);
                dataP = formatoFinal.format(dataOriginal);
                
            } catch (ParseException ex) {
                Logger.getLogger(ListarNegociacoes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            dataP = "";
        }
        
        return dataP;
    }

    private Devedores buscaDevedor(int idDevedor){
        Devedores devedor = new Devedores();
        DevedoresDAO ddao = new DevedoresDAO();
        
        devedor = ddao.buscaIncompletoDevedorPorId(idDevedor);
        
        return devedor;
    }
    
    @Override
    public void devedorSelecionado(Devedores devedor) {
        this.devedor = devedor;
        DateFormat outputFormat = new SimpleDateFormat("dd/MM/yyyy");
        
        jTFNomeDevedor.setText(devedor.getNomeDevedor());
        jTFCPFDevedor.setText(devedor.getCpfcnpj());
        preencheTabelaNegociacoes(devedor.getIdDevedor());
    }
    
    // Implementação personalizada do TableCellRenderer
    static class CustomCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            String valorCelulaDataPagamento = table.getValueAt(row, 2).toString();
            String valorCelulaDataVencimento = table.getValueAt(row, 3).toString();
            
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                
            // Converter a String em LocalDate
            LocalDate localDateVencimento = LocalDate.parse(valorCelulaDataVencimento, formatter);

            if(isSelected){
                Color corFundo = table.getSelectionBackground();
                component.setBackground(corFundo);
            }else{
                if(table.getValueAt(row, 2).toString().isEmpty()){
                    LocalDate hoje = LocalDate.now();
                    if(localDateVencimento.isBefore(hoje)){
                        component.setBackground(Color.RED);
                    }else
                        component.setBackground(Color.WHITE);
                }else{
                    LocalDate localDatePagamento = LocalDate.parse(valorCelulaDataPagamento, formatter);
                    if(localDatePagamento.isAfter(localDateVencimento))
                        component.setBackground(Color.RED);
                    else if(localDatePagamento.isBefore(localDateVencimento) || (localDatePagamento.isEqual(localDateVencimento)))
                        component.setBackground(Color.GREEN);
                }
            }
            return component;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EfetuarPagamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EfetuarPagamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EfetuarPagamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EfetuarPagamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EfetuarPagamento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBGravarPagamento;
    private javax.swing.JButton jBPesquisarDevedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTFCPFDevedor;
    private javax.swing.JTextField jTFDataPagamento;
    private javax.swing.JTextField jTFNomeDevedor;
    private javax.swing.JTextField jTFPesquisarDevedor;
    private javax.swing.JTextField jTFValorPago;
    private javax.swing.JTable jTNegociacoes;
    private javax.swing.JTable jTPagamentos;
    // End of variables declaration//GEN-END:variables
}
